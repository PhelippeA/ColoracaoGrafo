using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace trabalhoColoracaoGrafo.GrafoColoracao
{
    class Funcoes
    {
        //OPERAÇÃO 1 -- EXIBIR GRAFO  
        public void exibirGrafo(List<Vertice> grafo)
        {
            Console.WriteLine("\n\n1) -- EXIBIR GRAFO\n\n");
            Console.WriteLine("--------------------------");
            if (grafo.Count != 0)
            {
                for (int i = 0; i < grafo.Count; i++)
                {
                    getCor(grafo[i].numCorVertice);    //  MOSTRAR A CIDADE COM A SUA COR ESPECÍFICA
                    Console.Write($"{grafo[i].nomeCidade}");
                    Console.ResetColor();
                    Console.Write(":  ");
                    cidadesAdjacentes(grafo, i);    //  LISTA DAS CIDADES ADJACENTES
                    Console.WriteLine();
                }
            }
            else
                Console.WriteLine("GRAFO VAZIO !");
            Console.WriteLine("--------------------------");
        }
        //OPERAÇÃO 2 -- INSERIR VÉRTICE
        public List<Vertice> inserirVertice(List<Vertice> grafo)
        {
            Console.WriteLine("\n\n2) -- INSERIR CIDADE\n\n");
            Console.WriteLine("Informe o nome da cidade a ser inserida:");
            string nomeC = Console.ReadLine();

            //CORREÇÃO AO USUÁRIO
            bool verificar = true;
            while (verificar && grafo.Count != 0)
            {
                for (int i = 0; i < grafo.Count; i++)
                {
                    if (grafo[i].nomeCidade.ToLower() == nomeC.ToLower())
                    {
                        Console.WriteLine($"{nomeC} já existe!");
                        break;
                    }
                    else
                        verificar = false;
                }
                if (verificar)
                {
                    Console.WriteLine("Informe outro nome para a cidade:");
                    nomeC = Console.ReadLine();
                }
            }
            grafo.Add(new Vertice(nomeC, grafo.Count, 0));

            exibirCidades(grafo);    //   LISTA DAS CIDADES
            Console.WriteLine("\nCidade inserida!");
            return grafo;
        }
        //OPERAÇÃO 3 -- REMOVER VÉRTICE 
        public List<Vertice> removerVertice(List <Vertice> grafo)
        {
            Console.WriteLine("\n\n3) -- REMOVER CIDADE\n\n");

            if (grafo.Count == 0)
            {
                Console.WriteLine("O grafo está vazio!");
                Console.WriteLine("Você precisa inserir ao menos uma cidade.");
                return grafo;
            }
            exibirCidades(grafo);    //   LISTA DAS CIDADES

            Console.WriteLine("Informe o número da cidade a ser removida:");
            int numC = int.Parse(Console.ReadLine());

            //CORREÇÃO AO USUÁRIO
            while (numC < 1 || numC > grafo.Count)
            {
                Console.Clear();
                Console.WriteLine("3) -- REMOVER CIDADE\n\n");
                exibirCidades(grafo);
                Console.WriteLine("Número inválido!");
                Console.WriteLine("Informe o número da cidade a ser removida:");
                numC = int.Parse(Console.ReadLine());
            }
            for (int i = 0; i < grafo.Count; i++)   // Remove as adjacências que contem esta cidade
                removerAdjacencia(grafo[i].adjacencia,numC);
            grafo.RemoveAt(numC-1);    // Remove a cidade
            grafo = ajustarNumGrafo(grafo,numC); 
            grafo = ajustarCor(grafo);
            return grafo;
        }
        //OPERAÇÃO 4 -- INSERIR ARESTA
        public List<Vertice> inserirAresta(List<Vertice> grafo)
        {
            Console.WriteLine("\n\n4) -- INSERIR RODOVIA\n\n");
            exibirCidades(grafo);

            int[] cidades = confereCidades(grafo.Count);

            if (verificarAdjBool(grafo, cidades[0], cidades[1]))
            {
                Console.WriteLine($"Já existe uma rodovia entre {grafo[cidades[0] - 1]} e {grafo[cidades[1] - 1]}!");
                return grafo;
            }

            grafo[cidades[0]].adjacencia.Add(cidades[1]);
            grafo[cidades[0]].adjacencia.Sort();
            grafo[cidades[1]].adjacencia.Add(cidades[0]);
            grafo[cidades[1]].adjacencia.Sort();

            grafo = ajustarCor(grafo);
            Console.WriteLine("Rodovia inserida!");
            return grafo;
        }
        //OPERAÇÃO 5 -- REMOVER ARESTA
        public List<Vertice> removerAresta(List<Vertice> grafo)
        {
            Console.WriteLine("\n\n5) -- REMOVER RODOVIA\n\n");

            if (grafo.Count < 2)
            {
                Console.WriteLine("O grafo não possui duas cidades!");
                return grafo;
            }
            exibirCidades(grafo);

            int[] cidades = confereCidades(grafo.Count);

            if (!verificarAdjBool(grafo, cidades[0], cidades[1]))
            {
                Console.WriteLine($"Não existe uma rodovia entre {grafo[cidades[0] - 1].nomeCidade} e {grafo[cidades[1] - 1].nomeCidade}!");
                return grafo;
            }

            grafo[cidades[0] - 1].adjacencia = removerAdjacencia(grafo[cidades[0] - 1].adjacencia,cidades[1]);
            grafo[cidades[1] - 1].adjacencia = removerAdjacencia(grafo[cidades[1] - 1].adjacencia, cidades[0]);
            grafo.RemoveAt(cidades[0] - 1);
            grafo.RemoveAt(cidades[1] - 1);

            return grafo;
        }
        //OPERAÇÃO 6 -- VERIFICAR ADJACÊNCIA
        public void verificarAdjacencia(List<Vertice>grafo)
        {
            Console.WriteLine("\n\n6) -- VERIFICAR RODOVIA\n\n");

            if (grafo.Count < 2)
                Console.WriteLine("O grafo não possui duas cidades!");

            else
            {
                exibirCidades(grafo);
                int[] cidades = confereCidades(grafo.Count);

                if (verificarAdjBool(grafo, cidades[0], cidades[1]))
                    Console.WriteLine($"Existe uma rodovia ligada entre {grafo[cidades[0] - 1].nomeCidade} e {grafo[cidades[1] - 1].nomeCidade}!");
                else
                    Console.WriteLine($"Não existe rodovia ligada entre {grafo[cidades[0] - 1].nomeCidade} e {grafo[cidades[1] - 1].nomeCidade}!");
            }
        }
        //--------------------------------------------------------------------
        public bool verificarAdjBool(List<Vertice> vertices, int vertice1, int vertice2)
        {
            for (int i = 0; i < vertices[vertice1 - 1].adjacencia.Count; i++)
                if (vertices[vertice1 - 1].adjacencia[i] == vertice2)
                    return true;
            return false;
        }
        public List<int> removerAdjacencia(List<int> adjacentes, int numeroCid)
        {
            for (int i = 0; i < adjacentes.Count; i++)
                if (adjacentes[i] == numeroCid)
                    adjacentes.RemoveAt(i);
            return adjacentes;
        }
        public int[] confereCidades(int quantVert)
        {
            int[] cidades = new int[2];
            Console.WriteLine("Informe o número da primeira cidade:");
            cidades[0] = int.Parse(Console.ReadLine());

            //CORREÇÃO AO USUÁRIO
            while (cidades[0] < 1 || cidades[0] > quantVert)
            {
                Console.WriteLine("Cidade inválida!");
                Console.WriteLine("Informe o número da primeira cidade:");
                cidades[0] = int.Parse(Console.ReadLine());
            }

            Console.WriteLine("Informe o número da segunda cidade:");
            cidades[1] = int.Parse(Console.ReadLine());

            //CORREÇÃO AO USUÁRIO
            while (cidades[1] < 1 || cidades[1] > quantVert || cidades[0] == cidades[1])
            {
                Console.WriteLine("Cidade inválida!");
                Console.WriteLine("Informe o número da segunda cidade:");
                cidades[1] = int.Parse(Console.ReadLine());
            }
            return cidades;
        }
        public void cidadesAdjacentes(List<Vertice> grafo, int posic)
        {
            grafo[posic].adjacencia.Sort();
            for (int i = 0; i < grafo[posic].adjacencia.Count; i++)
            {           
                getCor(grafo[grafo[posic].adjacencia[i]].numCorVertice);    //  MOSTRAR COR DAS CIDADES ADJACENTES
                Console.Write($"{grafo[grafo[posic].adjacencia[i]].nomeCidade}"); // MOSTRAR NOME DAS CIDADES ADJACENTES
                Console.ResetColor();
                Console.Write(", ");
            }
        }
        public void exibirCidades(List<Vertice> grafo)
        {
            Console.WriteLine("\nCidades:  ");
            for (int i = 0; i < grafo.Count; i++)
            {
                getCor(grafo[i].numCorVertice);    //  MOSTRAR A CIDADE COM A SUA COR ESPECÍFICA
                Console.WriteLine($"{grafo[i].numCidade} -- {grafo[i].nomeCidade}");
                Console.ResetColor();
            }
            Console.WriteLine("\n");
        }
        public List<Vertice> ajustarNumGrafo(List<Vertice> grafo, int numeroCidade)
        {
            grafo[i].adjacencia.Sort();
            for (int i = 0; i < grafo.Count; i++)
            {
                
                if (grafo[i].numCidade > numeroCidade)       //  AJUSTAR NÚMERO DA CIDADE
                    grafo[i].numCidade--;
                for (int j = 0; j < grafo[i].adjacencia.Count; j++)
                    if (grafo[i].adjacencia[j] > numeroCidade)
                        grafo[i].adjacencia[j]--;           // AJUSTAR NÚMERO DA CIDADE ADJACENTE
            }

        }
        public List<Vertice> ajustarCor(List<Vertice> grafo)
        {
            for (int i = 0; i < grafo.Count; i++)
                grafo[i].numCorVertice = 0;              // ATRIBUI TODAS AS CORES A COR "0"
            for (int i = 0; i < grafo.Count; i++)
                for (int j = 0; j < grafo[i].adjacencia.Count; j++)
                    if (grafo[i].numCorVertice == grafo[grafo[i].adjacencia[j] - 1].numCorVertice)// CASO A COR SEJA A MESMA DO VERTICE ADJACENTE
                        grafo[grafo[i].adjacencia[j] - 1].numCorVertice++;    // O NÚMERO DA COR DA CIDADE ADJ AUMENTA 1 
            return grafo;
        }
        public void getCor(int cor)
        {
            if (cor == 0)
                Console.ForegroundColor = ConsoleColor.Red;
            else if (cor == 1)
                Console.ForegroundColor = ConsoleColor.Green;
            else if (cor == 2)
                Console.ForegroundColor = ConsoleColor.Yellow;
            else if (cor == 3)
                Console.ForegroundColor = ConsoleColor.Blue;
            else if (cor == 4)
                Console.ForegroundColor = ConsoleColor.Black;
            else if (cor == 5)
                Console.ForegroundColor = ConsoleColor.White;
            else if (cor == 6)
                Console.ForegroundColor = ConsoleColor.Cyan;
            else if (cor == 7)
                Console.ForegroundColor = ConsoleColor.Gray;
            else if (cor == 8)
                Console.ForegroundColor = ConsoleColor.Magenta;
            else if (cor == 9)
                Console.ForegroundColor = ConsoleColor.DarkRed;
            else if (cor == 10)
                Console.ForegroundColor = ConsoleColor.DarkGreen;
            else if (cor == 11)
                Console.ForegroundColor = ConsoleColor.DarkYellow;
            else if (cor == 12)
                Console.ForegroundColor = ConsoleColor.DarkBlue;
            else if (cor == 13)
                Console.ForegroundColor = ConsoleColor.DarkCyan;
            else if (cor == 14)
                Console.ForegroundColor = ConsoleColor.DarkGray;
            else if (cor == 15)
                Console.ForegroundColor = ConsoleColor.DarkMagenta;
        }
    }
}
